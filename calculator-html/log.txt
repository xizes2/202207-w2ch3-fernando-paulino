15/04/22
- Begin html + css code for calculator
- Used flex display in order to equally divide the elements divs inside it's container (section), so their sizes were the same. And also had to use flex-orientation: row, in order for the elements are displayed in a row instead of in a column.
- To treat the overlapping of borders I created a sub-class of .number called left_border and added a few characteristics that were applied only on these elements. The border overlap happens when, for example, I have the right border of a div touching the left border of the adjacent div, making it 2 parallel borders touching and though doubling the thickness of the border.

18/04/22
- Started working on the function to get the text of each button

19/04/22
- Used the spread operator - [...] - on numbers to get an array instead of a htmlCollection so I can access the index of each button to get the corresponding text (number) of that div. Check the variable numbers.
- To refer the innerText of the button clicked I did:
1 - Add event listener for onclick action:
for(let i = 0; i < numbers.length; i++) {
    numbers[i].addEventListener('click', buttonPress, false);
};
2 - Create function that will be called onclick action:
function buttonPress() {
    let buttonNumber = this.innerText;
    console.log(buttonNumber)
}
Refs: 
https://stackoverflow.com/questions/19655189/javascript-click-event-listener-on-class

20/04/22
- Still working on the solution to block the use of operators when there's no numbers dialed.
- Changed the solution using an array of numbers and operators to a string of characters so the erase function works. This string will have to be dealt with on the function makeCalculations()

21/04/22
- Still strugling to make the operations on the correct order.
- BREAKTHROUGH!!!! Finally could get the logic right to make the operations on the correct order!! 

22/04/22
- Improving logic for the operations on showNumberDialed().
- Basically for the calculations logic I used 3 'if' condition:
    1 - start from 0, first button press
    2 - second button press on
    3 - after equal press, so that the user can keep doing calculations without reset the calculator
    Inside each 'if' I used a switch to control the logic needed for each condition. For more details, check the comments.

26/04/22
- Correcting different parts, but mainly the 'erase' button.
- Finished the calculations logic. 
- Working on the calculator screen. Thinking about what's the best way to limit number size and the best way to display the numbers on the screen.

27/04/22
- For the calculator screen I solved the overflow of numbers using on css 'overflow-x: scroll' on #result in conjunction with 'calcScreen.scroll += 1000' on each number and operator digit, to keep the bar at the end.
- Finished first version of calculator!!!

9/05/22
- Refactoring after teacher recomendations.
- I added a 2nd screen that is suposed to show the dialed numbers until it reaches it's limit. Fighting to discover the best way to block the button dial in order it stops appearing
- Also have to deal with opration like '.+3'.
- Also when I reach the end of support screen, and hit '=' - make more tests

10/05/22
- Also have to deal with operation like '.+3'. SOLVED.
- Still trying to figure out the screen size so the numbers don't overflow it.
- Had to change the logic of the sum/subtraction part beacause the code was making the operations by sign ('+' or '-'), instead of doing it straight from the first to the last element. 

11/05/22
- I kept the logic for 'x' and 'รท' and after calculating all multiplication and division, to deal with the sum and subtraction I put together the operator and it's respective number (['8', '-', '3'] => [8, '-3']) and then I used array.reduce() to sum everything.
- Finished first refactored version!!

12/05/22
- Reafactor code to accept operations with the first number negative.